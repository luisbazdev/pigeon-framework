import { IRepository } from "pigeon-core";
{{#if (eq database "mysql")}}
import { MySQL } from "pigeon-core";
{{else}}
import { MongoDB } from "pigeon-core";
{{/if}}
import { I{{capitalize name}} } from "../model/{{name}}";
/**
 * Repository for {{capitalize name}} objects.
 * @type {IRepository}
 *
 * Please check https://github.com/luisbazdev/pigeon-framework 
 * for more understanding :)
 */
export const {{capitalize name}}Repository: IRepository = {
{{#if (eq database "mysql")}}
  /**
   * Creates a new {{capitalize name}} object.
   * @param {any} {{capitalize name}} - The {{capitalize name}} object to be created.
   */
  create: async function({{capitalize name}}: I{{capitalize name}}) {
    try {
      const [result] = await MySQL.query("INSERT INTO {{capitalize name}}s SET ?", {{capitalize name}});
      return result.insertId;
    } catch (error) {
      throw error;  
    }
  },
  /**
   * Finds an {{capitalize name}} object by its ID.
   * @param {number} id - The ID of the {{capitalize name}} object.
   */
  findById: async function(id: string | number) {
    try {
      const [rows, fields] = await MySQL.query("SELECT * FROM {{capitalize name}}s WHERE id=?", [id]);
      return rows[0];
    } catch (error) {
      throw error;  
    }
  },
  /**
   * Finds all {{capitalize name}} objects.
   */
  findAll: async function () {
    try {
      const [rows, fields] = await MySQL.query("SELECT * FROM {{capitalize name}}s");
      return rows;
    } catch (error) {
      throw error;  
    }
  },
  /**
   * Updates an {{capitalize name}} object.
   * @param {number} id - The ID of the {{capitalize name}} object to be updated.
   * @param {any} {{capitalize name}} - The updated {{capitalize name}} object.
   */
  update: async function(id: string | number, {{capitalize name}}: I{{capitalize name}}) {
    try {
      const [result] = await MySQL.query("UPDATE {{capitalize name}}s SET ? WHERE id=?", [{{capitalize name}}, id]);
      return result.affectedRows > 0;
    } catch (error) {
      throw error;  
    }
  },
  /**
   * Deletes an {{capitalize name}} object by its ID.
   * @param {number} id - The ID of the {{capitalize name}} object to be deleted.
   */
  delete: async function(id: string | number) {
    try {
      const [result] = await MySQL.query("DELETE FROM {{capitalize name}}s WHERE id=?", [id]);
      return result.affectedRows > 0;
    } catch (error) {
      throw error;  
    }
  },
{{else}}
  /**
   * Creates a new {{capitalize name}} object.
   * @param {any} {{capitalize name}} - The {{capitalize name}} object to be created.
   */
  create: async function({{capitalize name}}: any) {
    const result = await MongoDB.insertOne({{capitalize name}});
    return result.insertedId;
  },
  /**
   * Finds an {{capitalize name}} object by its ID.
   * @param {number} id - The ID of the {{capitalize name}} object.
   */
  findById: async function(id: any) {
    const result = await MongoDB.findOne({ _id: id });
    return result;
  },
  /**
   * Finds all {{capitalize name}} objects.
   */
  findAll: async function () {
    const result = await MongoDB.find({}).toArray();
    return result;
  },
  /**
   * Updates an {{capitalize name}} object.
   * @param {number} id - The ID of the {{capitalize name}} object to be updated.
   * @param {any} {{capitalize name}} - The updated {{capitalize name}} object.
   */
  update: async function(id: any, {{capitalize name}}: any) {
    const result = await MongoDB.updateOne({ _id: id }, { $set: {{capitalize name}} });
    return result.modifiedCount > 0;
  },
  /**
   * Deletes an {{capitalize name}} object by its ID.
   * @param {number} id - The ID of the {{capitalize name}} object to be deleted.
   */
  delete: async function(id: any) {
    const result = await MongoDB.deleteOne({ _id: id });
    return result.deletedCount > 0;
  },
{{/if}}
};
